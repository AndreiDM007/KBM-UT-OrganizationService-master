// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AuthorizationService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Kebormed.Core.OrganizationService.Grpc.Generated {
  public static partial class AuthorizationService
  {
    static readonly string __ServiceName = "Kebormed.Core.OrganizationService.Grpc.Generated.AuthorizationService";

    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganizationUserPermission_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganizationUserPermission_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserPermission_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserPermission_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserAndRolePermission_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserAndRolePermission_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganizationUserRole_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganizationUserRole_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganizationUserRole_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganizationUserRole_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserRole_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserRole_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistRolePermissionById_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistRolePermissionById_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateRolePermission_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateRolePermission_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateRolePermission_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateRolePermission_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteRolePermission_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteRolePermission_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryRolePermission_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryRolePermission_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response.Parser.ParseFrom);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response> __Method_UpdateOrganizationUserPermission = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrganizationUserPermission",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganizationUserPermission_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganizationUserPermission_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response> __Method_QueryOrganizationUserPermission = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOrganizationUserPermission",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserPermission_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserPermission_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response> __Method_QueryOrganizationUserAndRolePermission = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOrganizationUserAndRolePermission",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserAndRolePermission_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserAndRolePermission_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response> __Method_CreateOrganizationUserRole = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOrganizationUserRole",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganizationUserRole_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganizationUserRole_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response> __Method_DeleteOrganizationUserRole = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganizationUserRole",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganizationUserRole_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganizationUserRole_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response> __Method_QueryOrganizationUserRole = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOrganizationUserRole",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserRole_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganizationUserRole_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response> __Method_ExistRolePermissionById = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExistRolePermissionById",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistRolePermissionById_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistRolePermissionById_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response> __Method_CreateRolePermission = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRolePermission",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateRolePermission_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateRolePermission_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response> __Method_UpdateRolePermission = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRolePermission",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateRolePermission_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateRolePermission_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response> __Method_DeleteRolePermission = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRolePermission",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteRolePermission_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteRolePermission_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response> __Method_QueryRolePermission = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryRolePermission",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryRolePermission_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryRolePermission_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kebormed.Core.OrganizationService.Grpc.Generated.AuthorizationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of AuthorizationService</summary>
    public abstract partial class AuthorizationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response> UpdateOrganizationUserPermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response> QueryOrganizationUserPermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response> QueryOrganizationUserAndRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response> CreateOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response> DeleteOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response> QueryOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response> ExistRolePermissionById(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response> CreateRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response> UpdateRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response> DeleteRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response> QueryRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for AuthorizationService</summary>
    public partial class AuthorizationServiceClient : grpc::ClientBase<AuthorizationServiceClient>
    {
      /// <summary>Creates a new client for AuthorizationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AuthorizationServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for AuthorizationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AuthorizationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AuthorizationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AuthorizationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response UpdateOrganizationUserPermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizationUserPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response UpdateOrganizationUserPermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrganizationUserPermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response> UpdateOrganizationUserPermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizationUserPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Response> UpdateOrganizationUserPermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganizationUserPermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrganizationUserPermission, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response QueryOrganizationUserPermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganizationUserPermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response QueryOrganizationUserPermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOrganizationUserPermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response> QueryOrganizationUserPermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganizationUserPermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Response> QueryOrganizationUserPermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserPermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOrganizationUserPermission, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response QueryOrganizationUserAndRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganizationUserAndRolePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response QueryOrganizationUserAndRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOrganizationUserAndRolePermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response> QueryOrganizationUserAndRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganizationUserAndRolePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Response> QueryOrganizationUserAndRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserAndRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOrganizationUserAndRolePermission, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response CreateOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizationUserRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response CreateOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOrganizationUserRole, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response> CreateOrganizationUserRoleAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizationUserRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Response> CreateOrganizationUserRoleAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganizationUserRole.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOrganizationUserRole, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response DeleteOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationUserRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response DeleteOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganizationUserRole, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response> DeleteOrganizationUserRoleAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationUserRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Response> DeleteOrganizationUserRoleAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganizationUserRole.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganizationUserRole, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response QueryOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganizationUserRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response QueryOrganizationUserRole(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOrganizationUserRole, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response> QueryOrganizationUserRoleAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganizationUserRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Response> QueryOrganizationUserRoleAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganizationUserRole.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOrganizationUserRole, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response ExistRolePermissionById(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistRolePermissionById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response ExistRolePermissionById(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExistRolePermissionById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response> ExistRolePermissionByIdAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistRolePermissionByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Response> ExistRolePermissionByIdAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistRolePermissionById.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExistRolePermissionById, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response CreateRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRolePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response CreateRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRolePermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response> CreateRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRolePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Response> CreateRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRolePermission, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response UpdateRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRolePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response UpdateRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRolePermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response> UpdateRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRolePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Response> UpdateRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRolePermission, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response DeleteRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRolePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response DeleteRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRolePermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response> DeleteRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRolePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Response> DeleteRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRolePermission, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response QueryRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryRolePermission(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response QueryRolePermission(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryRolePermission, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response> QueryRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryRolePermissionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Response> QueryRolePermissionAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryRolePermission.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryRolePermission, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AuthorizationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AuthorizationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuthorizationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_UpdateOrganizationUserPermission, serviceImpl.UpdateOrganizationUserPermission)
          .AddMethod(__Method_QueryOrganizationUserPermission, serviceImpl.QueryOrganizationUserPermission)
          .AddMethod(__Method_QueryOrganizationUserAndRolePermission, serviceImpl.QueryOrganizationUserAndRolePermission)
          .AddMethod(__Method_CreateOrganizationUserRole, serviceImpl.CreateOrganizationUserRole)
          .AddMethod(__Method_DeleteOrganizationUserRole, serviceImpl.DeleteOrganizationUserRole)
          .AddMethod(__Method_QueryOrganizationUserRole, serviceImpl.QueryOrganizationUserRole)
          .AddMethod(__Method_ExistRolePermissionById, serviceImpl.ExistRolePermissionById)
          .AddMethod(__Method_CreateRolePermission, serviceImpl.CreateRolePermission)
          .AddMethod(__Method_UpdateRolePermission, serviceImpl.UpdateRolePermission)
          .AddMethod(__Method_DeleteRolePermission, serviceImpl.DeleteRolePermission)
          .AddMethod(__Method_QueryRolePermission, serviceImpl.QueryRolePermission).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuthorizationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_UpdateOrganizationUserPermission, serviceImpl.UpdateOrganizationUserPermission);
      serviceBinder.AddMethod(__Method_QueryOrganizationUserPermission, serviceImpl.QueryOrganizationUserPermission);
      serviceBinder.AddMethod(__Method_QueryOrganizationUserAndRolePermission, serviceImpl.QueryOrganizationUserAndRolePermission);
      serviceBinder.AddMethod(__Method_CreateOrganizationUserRole, serviceImpl.CreateOrganizationUserRole);
      serviceBinder.AddMethod(__Method_DeleteOrganizationUserRole, serviceImpl.DeleteOrganizationUserRole);
      serviceBinder.AddMethod(__Method_QueryOrganizationUserRole, serviceImpl.QueryOrganizationUserRole);
      serviceBinder.AddMethod(__Method_ExistRolePermissionById, serviceImpl.ExistRolePermissionById);
      serviceBinder.AddMethod(__Method_CreateRolePermission, serviceImpl.CreateRolePermission);
      serviceBinder.AddMethod(__Method_UpdateRolePermission, serviceImpl.UpdateRolePermission);
      serviceBinder.AddMethod(__Method_DeleteRolePermission, serviceImpl.DeleteRolePermission);
      serviceBinder.AddMethod(__Method_QueryRolePermission, serviceImpl.QueryRolePermission);
    }

  }
}
#endregion
