// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: OrganizationService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Kebormed.Core.OrganizationService.Grpc.Generated {
  public static partial class OrganizationService
  {
    static readonly string __ServiceName = "Kebormed.Core.OrganizationService.Grpc.Generated.OrganizationService";

    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganization_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganization_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganization_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganization_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_GetOrganization_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_GetOrganization_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganization_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganization_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistOrganization_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistOrganization_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistsOrganizationById_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistsOrganizationById_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganization_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response> __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganization_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response.Parser.ParseFrom);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response> __Method_CreateOrganization = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateOrganization",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganization_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_CreateOrganization_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response> __Method_QueryOrganization = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueryOrganization",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganization_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_QueryOrganization_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response> __Method_GetOrganization = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetOrganization",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_GetOrganization_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_GetOrganization_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response> __Method_UpdateOrganization = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateOrganization",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganization_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_UpdateOrganization_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response> __Method_ExistOrganization = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExistOrganization",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistOrganization_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistOrganization_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response> __Method_ExistsOrganizationById = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ExistsOrganizationById",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistsOrganizationById_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_ExistsOrganizationById_Response);

    static readonly grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response> __Method_DeleteOrganization = new grpc::Method<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request, global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteOrganization",
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganization_Request,
        __Marshaller_Kebormed_Core_OrganizationService_Grpc_Generated_DeleteOrganization_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Kebormed.Core.OrganizationService.Grpc.Generated.OrganizationServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of OrganizationService</summary>
    public abstract partial class OrganizationServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response> CreateOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response> QueryOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response> GetOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response> UpdateOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response> ExistOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response> ExistsOrganizationById(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response> DeleteOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for OrganizationService</summary>
    public partial class OrganizationServiceClient : grpc::ClientBase<OrganizationServiceClient>
    {
      /// <summary>Creates a new client for OrganizationService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public OrganizationServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for OrganizationService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public OrganizationServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected OrganizationServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected OrganizationServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response CreateOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response CreateOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateOrganization, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response> CreateOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Response> CreateOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.CreateOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateOrganization, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response QueryOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response QueryOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueryOrganization, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response> QueryOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueryOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Response> QueryOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.QueryOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueryOrganization, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response GetOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response GetOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetOrganization, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response> GetOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Response> GetOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.GetOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetOrganization, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response UpdateOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response UpdateOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateOrganization, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response> UpdateOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Response> UpdateOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.UpdateOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateOrganization, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response ExistOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response ExistOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExistOrganization, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response> ExistOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Response> ExistOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExistOrganization, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response ExistsOrganizationById(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistsOrganizationById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response ExistsOrganizationById(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ExistsOrganizationById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response> ExistsOrganizationByIdAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExistsOrganizationByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Response> ExistsOrganizationByIdAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.ExistsOrganizationById.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ExistsOrganizationById, null, options, request);
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response DeleteOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganization(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response DeleteOrganization(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteOrganization, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response> DeleteOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteOrganizationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Response> DeleteOrganizationAsync(global::Kebormed.Core.OrganizationService.Grpc.Generated.DeleteOrganization.Types.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteOrganization, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override OrganizationServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new OrganizationServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(OrganizationServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateOrganization, serviceImpl.CreateOrganization)
          .AddMethod(__Method_QueryOrganization, serviceImpl.QueryOrganization)
          .AddMethod(__Method_GetOrganization, serviceImpl.GetOrganization)
          .AddMethod(__Method_UpdateOrganization, serviceImpl.UpdateOrganization)
          .AddMethod(__Method_ExistOrganization, serviceImpl.ExistOrganization)
          .AddMethod(__Method_ExistsOrganizationById, serviceImpl.ExistsOrganizationById)
          .AddMethod(__Method_DeleteOrganization, serviceImpl.DeleteOrganization).Build();
    }

    /// <summary>Register service method implementations with a service binder. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, OrganizationServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateOrganization, serviceImpl.CreateOrganization);
      serviceBinder.AddMethod(__Method_QueryOrganization, serviceImpl.QueryOrganization);
      serviceBinder.AddMethod(__Method_GetOrganization, serviceImpl.GetOrganization);
      serviceBinder.AddMethod(__Method_UpdateOrganization, serviceImpl.UpdateOrganization);
      serviceBinder.AddMethod(__Method_ExistOrganization, serviceImpl.ExistOrganization);
      serviceBinder.AddMethod(__Method_ExistsOrganizationById, serviceImpl.ExistsOrganizationById);
      serviceBinder.AddMethod(__Method_DeleteOrganization, serviceImpl.DeleteOrganization);
    }

  }
}
#endregion
